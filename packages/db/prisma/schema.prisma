generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String       @id @default(cuid())
  email                       String       @unique
  name                        String?
  token                       String?
  password                    String
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @default(now())
  role                        Role         @default(USER)
  submissions                 Submission[]
  eventPoints                 EventPoints[]
  eventSubmissions            EventSubmission[]
}

model Event {
  id                          String       @id @default(cuid())
  title                       String
  description                 String
  hidden                      Boolean     @default(true)
  startTime                   DateTime
  endTime                     DateTime
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @default(now())
  Questions                   EventQuestion[]
  submissions                 Submission[]
  eventSubmissions            EventSubmission[]
  leaderboard                 Boolean @default(false)
}

model EventQuestion {
   id                          String   
   eventId                     String   
   QuestionId                   String
   createdAt                   DateTime     @default(now())
   updatedAt                   DateTime     @default(now())
   Event                       Event @relation(fields: [eventId], references: [id])     
   Question                   Question @relation(fields: [QuestionId], references: [id])
   index                      Int
   solved                     Int @default(0)

   @@id([eventId, QuestionId]) 
}

model Question {
  id                          String       @id @default(cuid())
  title                       String @unique
  description                 String
  slug                        String @unique
  events                      EventQuestion[] 
  difficulty                  Difficulty @default(MEDIUM)
  solved                       Int  @default(0)
  hidden                       Boolean @default(true)
  defaultcodes                 DefaultCode[]
  createdAt                   DateTime     @default(now())
  updatedAt                   DateTime     @default(now())
  submissions                 Submission[]
  eventSubmissions            EventSubmission[]
}

model DefaultCode {
   id                          Int       @id @default(autoincrement())
   code                        String
   questionId                  String
   question                    Question @relation(fields: [questionId], references: [id])
   languageId                  Int
   language                    Language @relation(fields: [languageId], references: [id])
   createdAt                   DateTime @default(now())
   updatedAt                   DateTime @default(now())
   @@unique([questionId, languageId])
}


model Language {
   id                          Int       @id @default(autoincrement())
   name                        String
   judge0Id                    Int @unique
   createdAt                   DateTime     @default(now())
   updatedAt                   DateTime     @default(now())    
   DefaultCodes                DefaultCode[]
   Submissions                 Submission[]
}

model Submission {
  id                    String @id @default(uuid())
  questionId            String
  userId                String
  languageId            Int
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now())  
  code                  String
  fullcode              String
  activeEventId         String?
  status                SubmissionResult @default(PENDING)
  memory                Int?
  time                  Float?  
  testcases             TestCase[]
  activeEvent           Event? @relation(fields: [activeEventId], references: [id])
  user                  User @relation(fields: [userId], references: [id])   
  question              Question @relation(fields: [questionId], references: [id]) 
  language              Language @relation(fields: [languageId], references: [id])
}

model TestCase {
  id                    String @id @default(uuid())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @default(now())   
  status                TestCaseResult @default(PENDING)
  index                 Int
  submissionId          String
  submission            Submission @relation(fields: [submissionId], references: [id])
  memory                Int?
  time                  Float?
  judge0TrackingId      String @unique  
}

model EventSubmission {
  id           String   @id @default(cuid())
  userId       String
  questionId    String
  eventId    String
  submissionId String 
  points       Int
  user         User @relation(fields: [userId], references: [id])
  question     Question @relation(fields: [questionId], references: [id])
  contest      Event @relation(fields: [eventId], references: [id])
  @@unique([userId, questionId, eventId])
}

model EventPoints {
  id               String   @id @default(cuid())
  contestId        String
  userId           String
  points      Int
  rank             Int
  user            User @relation(fields: [userId], references: [id])
  @@unique([contestId, userId])
}

enum TestCaseResult {
  AC
  FAIL
  TLE
  COMPILATION_ERROR
  PENDING
}

enum SubmissionResult {
  AC
  REJECTED
  PENDING
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Role {
  USER
  ADMIN
}